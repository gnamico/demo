name: 36 - Local Action

on:
  workflow_dispatch:

env:
  MONAI_APP_PATH: "demo/ai_spleen_seg_app/"
  MONAI_APP_CONFIG: "demo/ai_spleen_seg_app/app.yaml"
  MONAI_MODEL_ZIP: "spleen_model.zip"
  REPOSITORY: "monai"
  TAG: "latest"
  VERSION: "0.6.0"
  PYTHON_VERSION: "3.8"
  
jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Necessary to access local action

      - name: Setup AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}
          
      - name: Generate SSH Key
        run: |
          ssh-keygen -t rsa -f /tmp/ssh_id_gh -N ""
          echo "SSH_KEY_PATH=/tmp/ssh_id_gh.pub" >> $GITHUB_ENV
          echo "SSH_PRIVATE_KEY_PATH=/tmp/ssh_id_gh" >> $GITHUB_ENV


      - name: Local Action Call
        id: local-action
        uses: ./.github/actions/local-action
        with:
          instance_name: "monai-build"
          key_name: "monai-build-key"
          ec2_role: "ec2-role"
          ssh_key_path: "/tmp/ssh_id_gh.pub"
          aws_region: ${{ secrets.AWS_REGION }}

      - name: Local Action Output ID, VM name
        run: |
          echo "Instance ID: $INSTANCE_ID"
          echo "VM Name: $VM_NAME"
          
      - name: Test connection
        run: |
          echo "Attempting to connect to: ${{ env.VM_NAME }}"
          for i in {1..10}; do
            ssh -i  $SSH_PRIVATE_KEY_PATH -o StrictHostKeyChecking=no -o ConnectTimeout=10 $VM_NAME "uname -a" && break || sleep 10
          done

      - name: set up environment / Download MONAI
        run: |
           ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME << EOF
            echo 'export PATH="$PATH:/home/ubuntu/.local/bin"' >> ~/.bashrc
            source ~/.bashrc
            pip install --upgrade pip
            pip install --upgrade monai-deploy-app-sdk
            python3.10 -m pip install --force-reinstall holoscan
           EOF
          
      - name: Cloning repository
        env:
          REPO_URL: ${{ github.repository }}
        run: |
          ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME "git clone --branch main --depth 1 https://github.com/${REPO_URL}.git"
     
      - name: Downloading model
        run: |
          ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME << EOF
          wget https://github.com/${{ github.repository }}/releases/latest/download/${{ env.MONAI_MODEL_ZIP }} -O model.zip
          EOF
        
      - name: Unzip the model
        run: ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME "unzip -o model.zip"

      - name: Package MONAI deploy app
        run: |
          ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME << EOF
          monai-deploy package ${{ env.MONAI_APP_PATH }} \
            --config ${{ env.MONAI_APP_CONFIG }} \
            --tag seg_app:latest \
            --models model.ts \
            --platform x64-workstation \
            -l DEBUG
          EOF

      - name: Login to AWS ECR
        run: |
           ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

      - name: Check and create ECR repository if not exists
        run: |
          if ! aws ecr describe-repositories --region ${{ secrets.AWS_REGION }} --repository-names ${{ env.REPOSITORY }} > /dev/null 2>&1; then
            echo "Repository ${{ env.REPOSITORY }} does not exist. Creating it..."
            aws ecr create-repository --repository-name ${{ env.REPOSITORY }} --region ${{ secrets.AWS_REGION }}
          else
            echo "Repository ${{ env.REPOSITORY }} already exists."
          fi

      - name: Tag and Push Docker Image
        run: |
          DOCKER_IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${REPOSITORY}:${TAG}"
          ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME "docker tag seg_app-x64-workstation-dgpu-linux-amd64:latest $DOCKER_IMAGE"
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
          
      - name: Push Docker Image
        run: |
          ssh -i $SSH_PRIVATE_KEY_PATH $VM_NAME "docker push $DOCKER_IMAGE"

          
