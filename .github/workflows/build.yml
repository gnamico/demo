name: build_and_push_models

on: workflow_dispatch

env:
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  AWS_ACCOUNT_ID: "${{ secrets.AWS_ACCOUNT_ID }}"
  AWS_DEFAULT_REGION: "us-east-1"
  VERSION: "0.6.0"
  PYTHON_VERSION: "3.8"

jobs:
  setup_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_DEFAULT_REGION }}

      - name: Check for existing Key Pair and delete if exists
        id: check_key_pair
        run: |
          if aws ec2 describe-key-pairs --key-names "terraform-deployer-key" ; then
            aws ec2 delete-key-pair --key-name "terraform-deployer-key"
            echo "::set-output name=KEY_DELETED::true"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false 

      - name: Initialize a new Terraform working directory
        run: terraform init

      - name: Format Terraform configuration files
        run: terraform fmt

      - name: Check Terraform configuration files format
        run: terraform fmt -check

      - name: Generate unique SSH Key
        if: steps.check_key_pair.outputs.KEY_DELETED == 'true' || steps.check_key_pair.outputs.KEY_DELETED == ''
        run: ssh-keygen -t rsa -f /tmp/ssh_id_gh -N ""

      - name: Terraform Destroy
        if: ${{ always() }}
        run: terraform destroy -auto-approve

      - name: Terraform Apply
        run: terraform apply -auto-approve
        
      - name: Assign IAM Role to EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=gh-actions-build-monai-models-vm" --query "Reservations[0].Instances[0].InstanceId" --output text)
          aws ec2 associate-iam-instance-profile --instance-id $INSTANCE_ID --iam-instance-profile Name=ec2-role

      - name: Get IP address
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "AWS_IPADDRESS=$IP" >> $GITHUB_ENV
          echo "VM IP Address: $IP"
      
      - name: Get VM name
        run: |
          VM_NAME="ubuntu@${{ env.AWS_IPADDRESS }}"
          echo "VM_NAME=$VM_NAME" >> $GITHUB_ENV
          echo "Constructed VM Name: $VM_NAME"
      
      - name: Test connection
        run: |
          echo "Attempting to connect to: ${{ env.VM_NAME }}"
          sleep 90
          # We use StrictHostKeyChecking=no to accept the SSH fingerprint on the first connection
          ssh -i /tmp/ssh_id_gh -o StrictHostKeyChecking=no "${{ env.VM_NAME }}" "sudo uname -a"

          # Switch to user ubuntu and update .bashrc
          ssh -i /tmp/ssh_id_gh "$VM_NAME" << EOF
          sudo su - ubuntu -c "echo 'export PATH=/bin/anaconda3/bin:\$PATH' >> ~/.bashrc"
          sudo su - ubuntu -c "source ~/.bashrc && conda activate monai"
          EOF
          
      - name: Cloning repository
        run: ssh -i /tmp/ssh_id_gh $VM_NAME "git clone --branch main --depth 1 https://github.com/Project-MONAI/monai-deploy-app-sdk.git"
        
      - name: Downloading model
        run: ssh -i /tmp/ssh_id_gh $VM_NAME "gdown https://drive.google.com/uc?id=1Uds8mEvdGNYUuvFpTtCQ8gNU97bAPCaQ"

      - name: Unzip the model
        run: ssh -i /tmp/ssh_id_gh $VM_NAME "unzip -o ai_spleen_seg_bundle_data.zip"

      - name: Package MONAI deploy app
        run: |
          ssh -i /tmp/ssh_id_gh $VM_NAME "monai-deploy package examples/apps/ai_spleen_seg_app \
            --config monai-deploy-app-sdk/examples/apps/ai_spleen_seg_app/app.yaml \
            --tag seg_app:latest \
            --models spleen_model/model.ts \
            --platform x64-workstation \
            -l DEBUG"

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com
          
      - name: Tag Docker Image
        run: |
          IMAGE_NAME="monai:latest"
          DOCKER_IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${IMAGE_NAME}"
          ssh -i /tmp/ssh_id_gh $VM_NAME "docker tag seg_app-x64-workstation-dgpu-linux-amd64:latest $DOCKER_IMAGE"
          
      - name: Push Docker Image
        run: |
          IMAGE_NAME="monai:latest"
          DOCKER_IMAGE="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${IMAGE_NAME}"
          ssh -i /tmp/ssh_id_gh $VM_NAME "docker push $DOCKER_IMAGE"
